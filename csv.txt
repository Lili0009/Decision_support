    def get_urls(self):
        urls = super().get_urls()
        new_urls = [path('upload-csv/', self.upload_csv),]
        return new_urls + urls

    def upload_csv(self, request):
        if request.method == "POST":
            csv_file = request.FILES.get("csv_upload")

            if not csv_file:
                messages.error(request, "No file selected.")
                return HttpResponseRedirect(request.path_info)
            
            if not csv_file.name.endswith('.csv'):
                messages.warning(request, 'The wrong file type was uploaded')
                return HttpResponseRedirect(request.path_info)
            
            try:
                file_data = csv_file.read().decode("utf-8")
                csv_data = csv.reader(file_data.split("\n"))
                header_skipped = False
                for row in csv_data:
                    if not header_skipped:
                        header_skipped = True
                        continue 

                    if len(row) == 0 or row[0].strip() == "":  
                        continue
                    if len(row) != 4:
                        messages.error(request, f"Malformed row: {','.join(row)}")
                        continue  



                    date_str = row[0]
                    try:
                        date_obj = datetime.strptime(date_str, '%d-%b-%y').date()
                    except ValueError:
                        messages.error(request, f"Date format error in row: {','.join(row)}")
                        continue

                    #To accept null values when importing csv file to the administration site
                    water_level = row[1].strip() if row[1].strip() else None
                    rainfall = row[2].strip() if row[2].strip() else None
                    drawdown = row[3].strip() if row[3].strip() else None


                    try:
                        water_level = float(water_level) if water_level else None
                        rainfall = float(rainfall) if rainfall else None
                        drawdown = float(drawdown) if drawdown else None
                    except ValueError:
                        messages.error(request, f"Invalid numeric value in row: {','.join(row)}")
                        continue

                    #To add the objects in administration site
                    water_data.objects.update_or_create(
                        Date=date_obj,
                        defaults={
                            'WaterLevel': water_level,
                            'Rainfall': rainfall,
                            'Drawdown': drawdown,
                        }
                    )
                messages.success(request, "CSV file has been processed successfully.")
            except Exception as e:
                messages.error(request, f"Error processing file: {e}")
            return HttpResponseRedirect(request.path_info)

        form = CsvImportForm()
        data = {"form": form}
        
        return render(request, "admin/csv_upload.html", data)	